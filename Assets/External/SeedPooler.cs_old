using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SeedPooler : MonoBehaviour
{
    public Dictionary< string, Queue<GameObject> > seedDictionary;

    [System.Serializable]
    public class Pool
    {
        public string tag;
        public GameObject prefab;
        public int size;
    }

    #region Singleton

    public static SeedPooler Instance;

    private void Awake()
    {
        Instance = this;
    }

    #endregion

    public List<Pool> pools;

    void Start()
    {
        seedDictionary = new Dictionary<string, Queue<GameObject>>(); 

        foreach (Pool pool in pools)
        {
            Queue<GameObject> seedPool = new Queue<GameObject>();

            for (int i = 0; i < pool.size; i++)
            {
                GameObject seed = Instantiate(pool.prefab);
                seed.SetActive(false);
                seedPool.Enqueue(seed);
            }
            seedDictionary.Add(pool.tag, seedPool);
        }
    }

    public GameObject spawnSeeds (string tag, Vector3 position, Quaternion rotation)
    {
        if(!seedDictionary.ContainsKey(tag))
        {
            Debug.LogWarning("Falta el Pool con tag" + tag);
            return null;
        }

        GameObject seedToSpawn = seedDictionary[tag].Dequeue();

        seedToSpawn.SetActive(true);
        seedToSpawn.transform.position = position;
        seedToSpawn.transform.rotation = rotation;

        IPooledSeed pooledSeed = seedToSpawn.GetComponent<IPooledSeed>();

        if(pooledSeed != null)
        {
            pooledSeed.OnSeedSpawn();
        }

        seedDictionary[tag].Enqueue(seedToSpawn);

        return seedToSpawn;
    }


}
